[alias]
  # Prevent git git from blowing up
  git = !exec git

  fp = fetch --prune
  pp = pull --prune
  co  = checkout
  cp  = cherry-pick
  c = clone --recursive  # Clone a repository including all submodules
  rb = !"git fetch && git rebase origin/main"

  please = push --force-with-lease
  shallow-clone = clone --depth=1
  hard-reset = reset --hard
  reset-last = reset --hard HEAD~1
  undo-last = reset --soft HEAD~1

  # create an empty repository
  create = !"git init && git commit --allow-empty -m init"

  # nice git log
  lg = "log --pretty=format:'%C(yellow)%h%Creset %C(red)%d %C(cyan)<%an>%Creset %s %Creset%Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
  g = !"git lg --graph"
  l = !"git lg --graph -n 20"

  # View the current working tree status using the short format
  s = status -sb

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin main"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  stats = shortlog --email --numbered --summary  # list contributors

  recent = !"git for-each-ref --count=10 --sort=-committerdate refs/heads/ --format='%(refname:short)'"

  # Commands for quickly saving current work state
  fix = commit --amend --no-edit
  wip = !"git reset . && git add . --all -U && git commit -m wip"
  save = stash save -u

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  rib = "!r() { git rebase -i HEAD~$(git log --oneline ${1-origin/main}..HEAD | wc -l); }; r"

  br = rev-parse --abbrev-ref HEAD

  # list aliases
  aliases = config --get-regexp alias

  # create a new working branch
  workon = "!s() { echo "Starting work on branch ${1?'Please specify branch name as argument'}" && (git rev-parse --verify "${1}" && git checkout "${1}") || (git fetch origin "${2-main}" && git checkout -b "${1}" origin/"${2-main}"); }; s"

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]
  autocrlf = input
  editor = vim
  abbrev = 12
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs, lines that are indented with 8 or more spaces, and
  # all kinds of trailing whitespace as an error.
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of
  # a line
  # whitespace = space-before-tab,indent-with-non-tab,trailing-space
  #
  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Speed up commands involving untracked files such as `git status`.
  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
  ui = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true
  conflictstyle = diff3

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadOf = "gist:"

[push]
  # default = matching
  default = current
  followTags = true

[commit]
  template=~/.gitcommit


[advice]
  statusHints = false

[credential]
  # cache creds (git help credential-cache)
  helper = cache


[diff]
  # Detect copies as well as renames
  renames = copies
  indentHeuristic = on

[diff "bin"]
  # Use `hexdump` to diff binary files
  textconv = hexdump -v -C

[help]
  # Automatically correct and execute mistyped commands
  # autocorrect = 1
  autocorrect = 0

[rebase]
  autosquash = true

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  required = true
  process = git-lfs filter-process

[user]
  # Don't guess the user's identity.
  # https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855
  useConfigOnly = true

[init]
  defaultBranch = main

[include]
    # Use this to override config without changing the global config.
    path = ~/.gitconfig.local
