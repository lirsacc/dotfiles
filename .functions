#!/usr/bin/env bash

# Use Gitâ€™s colored diff when available
if hash git &> /dev/null; then
    function diff() {
        git diff --no-index --color-words "$@"
    }
fi

# Compare original and gzipped file size
function gz() {
    local origsize gzipsize ratio
    origsize=$(wc -c < "$1")
    gzipsize=$(gzip -c "$1" | wc -c)
    ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
    printf "orig: %d bytes\n" "$origsize"
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
    printf "\\\x%s" "$(printf "%s" "$@" | xxd -p -c1 -u)"
    # print a newline unless weâ€™re piping the output to another program
    if [ -t 1 ]; then
        echo # newline
    fi
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$*\""
    # print a newline unless weâ€™re piping the output to another program
    if [ -t 1 ]; then
        echo # newline
    fi
}

# Get a characterâ€™s Unicode code point
function codepoint() {
    perl -e "use utf8; print sprintf('U+%04X', ord(\"$*\"))"
    # print a newline unless weâ€™re piping the output to another program
    if [ -t 1 ]; then
        echo # newline
    fi
}

# `o` with no arguments opens current directory, otherwise opens the given
# location
function o() {
    if [ $# -eq 0 ]; then
        open .
    else
        open "$@"
    fi
}

# Spoof your mac adress on en0
function spoof() {
    mac=$(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//')
    echo "Changing en0 MAC to $mac"
    sudo ifconfig en0 ether "$mac"
}

# Show normally hidden system and dotfile types of files
# in Mac OSX Finder
function showhiddenfiles() {
    defaults write com.apple.Finder AppleShowAllFiles YES
    osascript -e 'tell application "Finder" to quit'
    sleep 0.25
    osascript -e 'tell application "Finder" to activate'
}

# Hide (back to defaults) normally hidden system and dotfile types of files
# in Mac OSX Finder
function hidehiddenfiles() {
    defaults write com.apple.Finder AppleShowAllFiles NO
    osascript -e 'tell application "Finder" to quit'
    sleep 0.25
    osascript -e 'tell application "Finder" to activate'
}

function fixperms() {
    find . \( -name "*.sh" -or -type d \) -exec chmod 755 {} \; && find . -type f ! -name "*.sh" -exec chmod 644 {} \;
}

function create() {
    if [ -f "$1" ]; then
        # echo "$1 already exists -> touching"
        touch "$1"
    else
        install -Dv /dev/null "$1"
    fi
}

function online-check() {
    # Stolen and adapted (removed cron job, use as a command) from:
    # https://github.com/nicksp/dotfiles/
    local offline
    offline=$(dig 8.8.8.8 +time=1 +short google.com A | grep -c "no servers could be reached")
    if [[ "$offline" == "0" ]]; then
        return 0
    else
        return 1
    fi
}

# extract line(s) from stdin
function line() {
    local _hc
    local _tc
    _hc="${2-${1?missing line number}}"
    [[ -n "$2" ]] && _tc=$(($2 - $1 + 1)) || _tc=1
    head -n"${_hc}" <&0 | tail -n"${_tc}"
}

# who is using the laptop's iSight camera?
camerausedby() {
    echo "Checking to see who is using the iSight cameraâ€¦ ðŸ“·"
    usedby=$(lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{printf $2"\n"}' | xargs ps)
    echo -e "Recent camera uses:\n$usedby"
}

function localip() {
    function _localip() { echo " $(ipconfig getifaddr "$1")"; }
    export _localip
    local purple="\x1B\[35m" reset="\x1B\[m"
    networksetup -listallhardwareports \
        | sed -r "s/Hardware Port: (.*)/${purple}\1${reset}/g" \
        | sed -r "s/Device: (en.*)$/$(_localip @ &)/e" \
        | sed -r "s/Ethernet Address:/ /g" \
        | sed -r "s/(VLAN Configurations)|==*//g"
}

function publicip() {
    local externalip
    local blue="\x1B\e[34m" green="\x1B\e[32m" reset="\x1B\e[0m"
    externalip=$(dig +short myip.opendns.com @resolver1.opendns.com)
    echo
    echo "${blue}External IP${reset}"
    echo "  ${externalip}"
    echo
    echo "${green}Internal IP(s)${reset}"
    local internalips
    internalips=($(ifconfig | grep "inet " | grep -v 127.0.0.1 | cut -d\  -f2))
    for ip in "${internalips[@]}"; do
        echo "  ${ip}"
    done
    echo
}

function current-ips() {
    publicip
    localip
}

# Copy w/ progress
cp-p() {
    rsync -WavP --human-readable --progress "$1" "$2"
}

function randomchars() {
    dd if=/dev/urandom count=1 2> /dev/null \
        | uuencode -m - \
        | sed -ne 2p \
        | cut -c-"${1}"
}

# Generate a 6mb random file:
#   randombytes 6 > random.txt
function randombytes() {
    dd if=/dev/urandom bs="${2:-1M}" count="${1}" 2> /dev/null | cat
}

# Encrypt to stdout
function encrypt() {
    openssl enc -aes-256-cbc -salt -a -in "$1"
}

# Decrypt to stdout
function decrypt() {
    openssl enc -aes-256-cbc -d -a -in "${1}"
}
