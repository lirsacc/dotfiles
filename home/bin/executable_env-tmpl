#!/usr/bin/env bash

# Poor man's templating

# Replace all occurrence of ${VAR} in stdin with the value of $VAR where
# VAR is an existing env variable.

# Use --strict to break if any env variable in from stdin is unset.

# TODO:
# - Turn this in a real cli tool (--help, better opts, etc.)
# - Support some of bash substitution (:- / -)

declare tmp_file tracing strict sed_args env_vars env_var undef

[[ "$-" =~ x ]] && tracing=1 || tracing=0
[[ "${*}" == *"--strict"* ]] && strict=1 || strict=0

tmp_file="_$$.$RANDOM.tmp"
undef="$RANDOM"

# Disables trace (`-x`) to avoid leaking env vars when run
# in an unprivileged environment
[[ $tracing == 1 ]] && set +x

sed_args=()
env_vars=()

function cleanup() {
    # Re-enable trace (`-x`) if applicable
    [[ $tracing == 1 ]] && set -x
    rm -f "$tmp_file"
    unset cleanup
}

echo "$(< /dev/stdin)" > "${tmp_file}"

# shellcheck disable=2207
env_vars=($(
    grep --only-matching --perl-regexp '\$\{[A-Z\_]+\}' "${tmp_file}" \
        | sed -e s/\[\{\}\$\]//g
))

for env_var in "${env_vars[@]}"; do

    if [[ $strict == 1 ]]; then
        if [[ "$(eval echo \$\{"$env_var:-$undef"\})" == "${undef}" ]]; then
            echo "${env_var} is not defined"
            cleanup
            return 1
        fi
    fi

    # Path and urls can have forward slash, so we use `|` as a delimiter for sed
    sed_args+=("-e s|\${$env_var}|$(eval echo \$\{"$env_var"\})|g")
done

sed "${sed_args[@]}" "${tmp_file}"
cleanup
